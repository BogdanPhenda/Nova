import os
import logging
import sys
import tempfile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)
from dotenv import load_dotenv

from .handlers import (
    start,
    menu_handler,
    menu_action_handler,
    handle_document,
    getfeed,
    getallfeed,
    help_command,
    error_handler,
    handle_object_type_selection,
    handle_file_action,
    show_user_files,
    handle_feed_selection,
    handle_template_action,
    handle_docs_action,
    handle_section_view
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

def check_single_instance():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞."""
    lock_file = os.path.join(tempfile.gettempdir(), 'catalog_bot.lock')
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if os.path.exists(lock_file):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            with open(lock_file, 'r') as f:
                old_pid = int(f.read().strip())
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
                os.kill(old_pid, 0)
                logger.error(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {old_pid})")
                return False
            except OSError:
                # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                pass
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π PID
        with open(lock_file, 'w') as f:
            f.write(str(os.getpid()))
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")
        return False

def cleanup_lock():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    try:
        lock_file = os.path.join(tempfile.gettempdir(), 'catalog_bot.lock')
        if os.path.exists(lock_file):
            os.remove(lock_file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not check_single_instance():
        sys.exit(1)
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            logger.error("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN)")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(bot_token).build()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        application.add_handler(MessageHandler(
            filters.Regex("^(üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|‚ùì –ü–æ–º–æ—â—å|üìö –®–∞–±–ª–æ–Ω—ã/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏|ü§ü –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)$"),
            menu_handler
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
        application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(menu_action_handler, pattern="^menu_"))
        application.add_handler(CallbackQueryHandler(handle_object_type_selection, pattern="^type_"))
        application.add_handler(CallbackQueryHandler(handle_file_action, pattern="^(file|update|delete|confirm|back)_"))
        application.add_handler(CallbackQueryHandler(handle_feed_selection, pattern="^feed_"))
        application.add_handler(CallbackQueryHandler(getallfeed, pattern="^admin_"))
        application.add_handler(CallbackQueryHandler(handle_template_action, pattern="^template_"))
        application.add_handler(CallbackQueryHandler(handle_docs_action, pattern="^docs_"))
        application.add_handler(CallbackQueryHandler(handle_section_view, pattern="^section_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        import atexit
        atexit.register(cleanup_lock)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        cleanup_lock()
        raise

if __name__ == '__main__':
    main() 