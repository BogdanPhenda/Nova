import os
import logging
from telegram import Update, Document, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from google_sheets.sheets import get_sheet_client, update_sheet_with_excel
from feed.feed_generator import create_xml_feed
from datetime import datetime
from s3_async_client import S3Client

SAVE_DIR = 'uploads'
GREETINGS = ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤", "hello", "hi", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"]
ADMIN_IDS = {941701865}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ user_id –∞–¥–º–∏–Ω–æ–≤

# --- –ú–µ–Ω—é ---
def get_main_menu():
    return ReplyKeyboardMarkup([["–ú–µ–Ω—é"]], resize_keyboard=True)

def get_inline_menu(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", callback_data="upload_excel")],
        [InlineKeyboardButton("üìÑ –ü–æ–ª—É—á–∏—Ç—å –º–æ–π —Ñ–∏–¥", callback_data="getfeed")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üåê –û–±—â–∏–π —Ñ–∏–¥", callback_data="getallfeed")])
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_first_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    is_admin = update.effective_user.id in ADMIN_IDS
    logging.info(f"[START] /start –æ—Ç user_id={update.effective_user.id}")
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–∏–¥–∞. –ù–∞–∂–º–∏—Ç–µ "–ú–µ–Ω—é" –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.',
        reply_markup=get_main_menu()
    )

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_admin = update.effective_user.id in ADMIN_IDS
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_inline_menu(is_admin)
    )

async def inline_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, s3_client: S3Client):
    query = update.callback_query
    user_id = query.from_user.id
    is_admin = user_id in ADMIN_IDS
    await query.answer()
    if query.data == "getfeed":
        # –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /getfeed
        class DummyUpdate:
            effective_user = query.from_user
            message = query.message
        await getfeed(DummyUpdate, context, s3_client)
    elif query.data == "help":
        class DummyUpdate:
            effective_user = query.from_user
            message = query.message
        await help_command(DummyUpdate, context)
    elif query.data == "getallfeed" and is_admin:
        class DummyUpdate:
            effective_user = query.from_user
            message = query.message
        await getallfeed(DummyUpdate, context, s3_client)
    elif query.data == "upload_excel":
        await query.edit_message_text("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é!")
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"[START] handle_document –æ—Ç user_id={update.effective_user.id}")
    document: Document = update.message.document
    if document.mime_type in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel']:
        file = await context.bot.get_file(document.file_id)
        file_path = os.path.join(SAVE_DIR, document.file_name)
        await file.download_to_drive(file_path)
        await update.message.reply_text(f'–§–∞–π–ª {document.file_name} –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...')
        worksheet = get_sheet_client(os.getenv('GOOGLE_CREDENTIALS_PATH'), os.getenv('GOOGLE_SHEET_NAME'))
        if worksheet:
            developer_id = update.effective_user.id
            rows_added = update_sheet_with_excel(worksheet, file_path, developer_id)
            if rows_added > 0:
                logging.info(f"[SUCCESS] handle_document: –¥–æ–±–∞–≤–ª–µ–Ω–æ {rows_added} —Å—Ç—Ä–æ–∫ –¥–ª—è user_id={developer_id}")
                await update.message.reply_text(f'–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É!')
            else:
                logging.warning(f"[FAIL] handle_document: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è user_id={developer_id}")
                await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.')
        else:
            logging.error(f"[ERROR] handle_document: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ –¥–ª—è user_id={update.effective_user.id}")
            await update.message.reply_text('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
    else:
        logging.warning(f"[FAIL] handle_document: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –æ—Ç user_id={update.effective_user.id}")
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).')

async def getfeed(update: Update, context: ContextTypes.DEFAULT_TYPE, s3_client: S3Client):
    user_id = update.effective_user.id
    logging.info(f"[START] /getfeed –æ—Ç user_id={user_id}")
    await update.message.reply_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–¥...')
    worksheet = get_sheet_client(os.getenv('GOOGLE_CREDENTIALS_PATH'), os.getenv('GOOGLE_SHEET_NAME'))
    if not worksheet:
        logging.error(f"[ERROR] /getfeed: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ –¥–ª—è user_id={user_id}")
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
        return
    all_records = worksheet.get_all_records()
    user_records = [rec for rec in all_records if rec.get('developer_telegram_id') == user_id]
    if not user_records:
        logging.info(f"[INFO] /getfeed: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={user_id}")
        await update.message.reply_text('–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–∞—Å. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª.')
        return
    public_feed_path = os.path.join(SAVE_DIR, f'feed_{user_id}.xml')
    if create_xml_feed(user_records, public_feed_path):
        object_name = f'feeds/feed_{user_id}.xml'
        public_url = await s3_client.upload_file(public_feed_path, object_name)
        if public_url:
            logging.info(f"[SUCCESS] /getfeed: —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}: {public_url}")
            await update.message.reply_text(f'‚úÖ –î–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–¥:\n{public_url}')
        else:
            logging.error(f"[ERROR] /getfeed: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3 –¥–ª—è user_id={user_id}")
            await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ S3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.')
    else:
        logging.error(f"[ERROR] /getfeed: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞ –¥–ª—è user_id={user_id}")
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.')

async def getallfeed(update: Update, context: ContextTypes.DEFAULT_TYPE, s3_client: S3Client):
    user_id = update.effective_user.id
    logging.info(f"[START] /getallfeed –æ—Ç user_id={user_id}")
    if user_id not in ADMIN_IDS:
        logging.warning(f"[FAIL] /getallfeed: –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ-–∞–¥–º–∏–Ω–∞ user_id={user_id}")
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞.')
        return
    await update.message.reply_text('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π —Ñ–∏–¥...')
    worksheet = get_sheet_client(os.getenv('GOOGLE_CREDENTIALS_PATH'), os.getenv('GOOGLE_SHEET_NAME'))
    if not worksheet:
        logging.error(f"[ERROR] /getallfeed: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ")
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
        return
    all_records = worksheet.get_all_records()
    public_feed_path = os.path.join(SAVE_DIR, 'feed_all.xml')
    if create_xml_feed(all_records, public_feed_path):
        object_name = 'feeds/feed_all.xml'
        public_url = await s3_client.upload_file(public_feed_path, object_name)
        if public_url:
            logging.info(f"[SUCCESS] /getallfeed: –æ–±—â–∏–π —Ñ–∏–¥ –æ–±–Ω–æ–≤–ª—ë–Ω: {public_url}")
            await update.message.reply_text(f'‚úÖ –û–±—â–∏–π —Ñ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!\n\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—â–∏–π —Ñ–∏–¥:\n{public_url}')
        else:
            logging.error(f"[ERROR] /getallfeed: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞ –≤ S3")
            await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞ –≤ S3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.')
    else:
        logging.error(f"[ERROR] /getallfeed: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞")
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_first_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    is_admin = update.effective_user.id in ADMIN_IDS
    logging.info(f"[START] /help –æ—Ç user_id={update.effective_user.id}")
    await update.message.reply_text(
        f'üëã {user_first_name}, –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
        '- –ü—Ä–∏—à–ª–∏ Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º ‚Äî —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ Google –¢–∞–±–ª–∏—Ü—É.\n'
        '- –ò—Å–ø–æ–ª—å–∑—É–π /getfeed ‚Äî —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏ –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–π —Ñ–∏–¥.\n'
        + ('- –ò—Å–ø–æ–ª—å–∑—É–π /getallfeed ‚Äî –æ–±—â–∏–π —Ñ–∏–¥ –ø–æ –≤—Å–µ–º –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n' if is_admin else '') +
        '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /help.',
        reply_markup=get_main_menu()
    )

async def greeting_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_first_name = update.effective_user.first_name or "–¥—Ä—É–≥"
    is_admin = update.effective_user.id in ADMIN_IDS
    logging.info(f"[START] greeting_handler –æ—Ç user_id={update.effective_user.id}")
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–∏–¥–∞.\n'
        '–ü—Ä–∏—à–ª–∏ Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /getfeed –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏.',
        reply_markup=get_main_menu()
    )

async def fallback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_admin = update.effective_user.id in ADMIN_IDS
    logging.info(f"[START] fallback_handler –æ—Ç user_id={update.effective_user.id}")
    await update.message.reply_text(
        '–Ø –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ /getfeed.\n'
        '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ ‚Äî /help.',
        reply_markup=get_main_menu()
    ) 