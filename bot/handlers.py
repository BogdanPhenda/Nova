import os
import logging
import hashlib
from telegram import Update, Document, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from google_sheets.sheets import GoogleSheetsClient
from feed.feed_generator import XMLFeedGenerator
from s3_async_client import S3AsyncClient
from models.file_manager import FileManager, FileMetadata
from dotenv import load_dotenv
from datetime import datetime
import pandas as pd
import uuid

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)
logging.getLogger('aiohttp').setLevel(logging.WARNING)
logging.getLogger('aiobotocore').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SAVE_DIR = "uploads"
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(',')))

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(SAVE_DIR):
    os.makedirs(SAVE_DIR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
sheets_client = GoogleSheetsClient(os.getenv('GOOGLE_CREDENTIALS_PATH', 'google-credentials.json'))
xml_generator = XMLFeedGenerator()
s3_client = S3AsyncClient(
    access_key=os.getenv('S3_ACCESS_KEY'),
    secret_key=os.getenv('S3_SECRET_KEY'),
    endpoint_url_base=os.getenv('S3_ENDPOINT', '').replace('https://', '').replace('http://', ''),
    bucket_name=os.getenv('S3_BUCKET'),
    public_endpoint=os.getenv('S3_PUBLIC_ENDPOINT')
)

# –î–æ–±–∞–≤–ª—è–µ–º FileManager –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
file_manager = FileManager(SAVE_DIR)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
OBJECT_TYPES = {
    "residential": "–ñ–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
    "commercial": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
    "land": "–ó–µ–º–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏",
    "cottage": "–ó–∞–≥–æ—Ä–æ–¥–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"
}

def get_base_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    buttons = [
        ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    second_row = ["üìö –®–∞–±–ª–æ–Ω—ã/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"]
    if is_admin:
        second_row.append("ü§ü –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    buttons.append(second_row)
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_main_menu_inline() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    buttons = [
        [
            InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="menu_upload"),
            InlineKeyboardButton("üìã –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="menu_files")
        ],
        [InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥", callback_data="menu_feed")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_admin_menu_inline() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    buttons = [
        [InlineKeyboardButton("üìä –û–±—â–∏–π —Ñ–∏–¥", callback_data="admin_all_feed")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_object_type_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞."""
    buttons = []
    for key, value in OBJECT_TYPES.items():
        buttons.append([InlineKeyboardButton(value, callback_data=f"type_{key}")])
    return InlineKeyboardMarkup(buttons)

def get_feed_type_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–¥–∞."""
    buttons = []
    for key, value in OBJECT_TYPES.items():
        buttons.append([InlineKeyboardButton(f"üìã {value}", callback_data=f"feed_{key}")])
    buttons.append([InlineKeyboardButton("üìä –û–±—â–∏–π —Ñ–∏–¥", callback_data="feed_all")])
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(buttons)

def get_user_feed_keyboard(user_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞."""
    files = file_manager.get_user_files(str(user_id))
    buttons = []
    
    if not files:
        buttons.append([InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_new")])
        buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        return InlineKeyboardMarkup(buttons)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
    files_by_type = {}
    for file in files:
        if file.object_type not in files_by_type:
            files_by_type[file.object_type] = []
        files_by_type[file.object_type].append(file)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    for obj_type, type_files in files_by_type.items():
        buttons.append([InlineKeyboardButton(
            f"üìã {OBJECT_TYPES[obj_type]} ({len(type_files)})",
            callback_data=f"feed_type_{obj_type}"
        )])
    
    # –î–ª—è –∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞
    if int(user_id) in ADMIN_IDS:
        buttons.append([InlineKeyboardButton("üìä –û–±—â–∏–π —Ñ–∏–¥ –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º", callback_data="feed_all")])
    
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(buttons)

def get_files_by_type_keyboard(user_id: str, object_type: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    files = file_manager.get_files_by_type(str(user_id), object_type)
    buttons = []
    
    for file in files:
        status_emoji = {
            "new": "üÜï",
            "processing": "‚è≥",
            "processed": "‚úÖ",
            "error": "‚ùå"
        }.get(file.status, "‚ùì")
        
        buttons.append([InlineKeyboardButton(
            f"{status_emoji} {file.original_name}",
            callback_data=f"feed_file_{file.file_id}"
        )])
    
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º", callback_data="feed_back_to_types")])
    return InlineKeyboardMarkup(buttons)

async def handle_object_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏–∑ callback_data
    obj_type = query.data.split('_')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['selected_object_type'] = obj_type
    
    await query.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {OBJECT_TYPES[obj_type]}\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.",
        reply_markup=None
    )

async def handle_file_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
    query = update.callback_query
    await query.answer()
    
    obj_type = query.data.split('_')[1]
    user_id = str(update.effective_user.id)
    
    files = file_manager.get_files_by_type(user_id, obj_type)
    if not files:
        await query.message.edit_text(
            f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ {OBJECT_TYPES[obj_type]}",
            reply_markup=get_file_list_keyboard(user_id)
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
    message = f"–§–∞–π–ª—ã —Ç–∏–ø–∞ {OBJECT_TYPES[obj_type]}:\n\n"
    for file in files:
        status_emoji = {
            "new": "üÜï",
            "processing": "‚è≥",
            "processed": "‚úÖ",
            "error": "‚ùå"
        }.get(file.status, "‚ùì")
        
        message += (
            f"{status_emoji} {file.original_name}\n"
            f"–ó–∞–≥—Ä—É–∂–µ–Ω: {file.upload_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {file.status}\n"
            f"ID: {file.file_id}\n\n"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons = [
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π", callback_data=f"upload_{obj_type}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]
    ]
    
    await query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_feed_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    action = query.data.split('_')[1]
    
    if action == "type":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        object_type = query.data.split('_')[2]
        await query.message.edit_text(
            f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞:",
            reply_markup=get_files_by_type_keyboard(str(user.id), object_type)
        )
    
    elif action == "file":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_id = query.data.split('_')[2]
        file_metadata = file_manager.get_file_metadata(file_id)
        
        if not file_metadata:
            await query.message.edit_text(
                f"‚ùå {user.first_name}, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_user_feed_keyboard(str(user.id))
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(user.id) != file_metadata.user_id and user.id not in ADMIN_IDS:
            await query.message.edit_text(
                f"‚õîÔ∏è {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É",
                reply_markup=get_user_feed_keyboard(str(user.id))
            )
            return
        
        await query.message.edit_text(
            f"‚è≥ {user.first_name}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–¥..."
        )

        try:
            worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
            if not worksheet:
                return await query.message.edit_text(
                    f'‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets',
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            records = sheets_client.get_developer_data(worksheet, file_metadata.user_id)
            if not records:
                return await query.message.edit_text(
                    f'‚ÑπÔ∏è {user.first_name}, –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

            await query.message.edit_text(
                f"üìù {user.first_name}, —Å–æ–∑–¥–∞—é XML —Ñ–∏–¥..."
            )

            output_path = f"uploads/feed_{file_metadata.file_id}.xml"
            success = xml_generator.create_xml_feed(
                data=records,
                output_path=output_path,
                developer_id=file_metadata.user_id
            )

            if not success:
                return await query.message.edit_text(
                    f"‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∏–¥–∞",
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

            await query.message.edit_text(
                f"üì§ {user.first_name}, –∑–∞–≥—Ä—É–∂–∞—é —Ñ–∏–¥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ..."
            )

            url = await s3_client.upload_file(output_path, f"feeds/feed_{file_metadata.file_id}.xml")
            if url:
                await query.message.edit_text(
                    f"‚úÖ {user.first_name}, —Ñ–∏–¥ –¥–ª—è —Ñ–∞–π–ª–∞ {file_metadata.original_name} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}\n\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(records)}",
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )
            else:
                await query.message.edit_text(
                    f"‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

        except Exception as e:
            logger.error(f"[ERROR] handle_feed_selection (file): {e}")
            await query.message.edit_text(
                f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_user_feed_keyboard(str(user.id))
            )
    
    elif action == "all":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user.id not in ADMIN_IDS:
            await query.message.edit_text(
                f"‚õîÔ∏è {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞",
                reply_markup=get_user_feed_keyboard(str(user.id))
            )
            return
        
        await query.message.edit_text(
            f"‚è≥ {user.first_name}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π —Ñ–∏–¥..."
        )

        try:
            worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
            if not worksheet:
                return await query.message.edit_text(
                    f'‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets',
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            records = sheets_client.get_developer_data(worksheet)
            if not records:
                return await query.message.edit_text(
                    f'‚ÑπÔ∏è {user.first_name}, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞',
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

            await query.message.edit_text(
                f"üìù {user.first_name}, —Å–æ–∑–¥–∞—é –æ–±—â–∏–π XML —Ñ–∏–¥..."
            )

            output_path = "uploads/feed_all.xml"
            success = xml_generator.create_xml_feed(
                data=records,
                output_path=output_path
            )

            if not success:
                return await query.message.edit_text(
                    f"‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ XML —Ñ–∏–¥–∞",
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

            await query.message.edit_text(
                f"üì§ {user.first_name}, –∑–∞–≥—Ä—É–∂–∞—é –æ–±—â–∏–π —Ñ–∏–¥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ..."
            )

            url = await s3_client.upload_file(output_path, "feeds/feed_all.xml")
            if url:
                await query.message.edit_text(
                    f"‚úÖ {user.first_name}, –æ–±—â–∏–π —Ñ–∏–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}\n\n"
                    f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(records)}",
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )
            else:
                await query.message.edit_text(
                    f"‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
                    reply_markup=get_user_feed_keyboard(str(user.id))
                )

        except Exception as e:
            logger.error(f"[ERROR] handle_feed_selection (all): {e}")
            await query.message.edit_text(
                f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_user_feed_keyboard(str(user.id))
            )
    
    elif action == "back":
        if query.data == "feed_back_to_types":
            await query.message.edit_text(
                f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞:",
                reply_markup=get_user_feed_keyboard(str(user.id))
            )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    is_admin = user.id in ADMIN_IDS
    
    welcome_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å Excel-—Ñ–∞–π–ª—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å XML-—Ñ–∏–¥—ã\n\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ '‚ùì –ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_base_keyboard(is_admin)
    )

async def show_file_details(update: Update, context: ContextTypes.DEFAULT_TYPE, file_metadata: FileMetadata):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞ –∏ –æ–ø—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    status_emoji = {
        "new": "üÜï",
        "processing": "‚è≥",
        "processed": "‚úÖ",
        "error": "‚ùå"
    }.get(file_metadata.status, "‚ùì")
    
    message = (
        f"{status_emoji} –§–∞–π–ª: {file_metadata.original_name}\n"
        f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {file_metadata.upload_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìä –¢–∏–ø: {OBJECT_TYPES[file_metadata.object_type]}\n"
        f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {file_metadata.status}\n"
    )
    
    if file_metadata.description:
        message += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {file_metadata.description}\n"
    
    buttons = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"update_{file_metadata.file_id}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"delete_{file_metadata.file_id}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_files")]
    ]
    
    return await update.callback_query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_file_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∞–π–ª–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    action = query.data.split('_', 1)[0]
    file_id = query.data.split('_')[-1]
    user = update.effective_user

    if action == "back":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
        back_action = query.data.split('_')[1]
        
        if back_action == "files":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤
            await show_user_files(update, context)
            return
        elif back_action == "main":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await query.message.edit_text(
                f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_inline()
            )
            return
        elif back_action == "types":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
            await query.message.edit_text(
                f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–æ–≤:",
                reply_markup=get_user_feed_keyboard(str(user.id))
            )
            return
    
    elif action == "file":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞
        file_metadata = file_manager.get_file_metadata(file_id)
        if file_metadata:
            await show_file_details(update, context, file_metadata)
        else:
            await query.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_files")
                ]])
            )
    
    elif action == "update":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        file_metadata = file_manager.get_file_metadata(file_id)
        if not file_metadata:
            await query.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(user.id) != file_metadata.user_id and user.id not in ADMIN_IDS:
            await query.message.edit_text(
                f"‚õîÔ∏è {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_files")
                ]])
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['updating_file_id'] = file_id
        
        await query.message.edit_text(
            f"{user.first_name}, –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {file_metadata.original_name}?\n\n"
            "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π Excel —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"file_{file_id}")]
            ])
        )
    
    elif action == "delete":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        file_metadata = file_manager.get_file_metadata(file_id)
        if not file_metadata:
            await query.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(user.id) != file_metadata.user_id and user.id not in ADMIN_IDS:
            await query.message.edit_text(
                f"‚õîÔ∏è {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_files")
                ]])
            )
            return
            
        await query.message.edit_text(
            f"{user.first_name}, –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_metadata.original_name}?\n"
            "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{file_id}"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"file_{file_id}")
                ]
            ])
        )
    
    elif action == "confirm":
        sub_action = query.data.split('_')[1]
        if sub_action == "delete":
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            file_metadata = file_manager.get_file_metadata(file_id)
            if not file_metadata:
                await query.message.edit_text(
                    "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_files")
                    ]])
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if str(user.id) != file_metadata.user_id and user.id not in ADMIN_IDS:
                await query.message.edit_text(
                    f"‚õîÔ∏è {user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_files")
                    ]])
                )
                return

            try:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheets
                worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
                if worksheet:
                    await query.message.edit_text(
                        f"üóë {user.first_name}, —É–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets..."
                    )
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º DataFrame
                    sheets_client.update_sheet_with_excel(worksheet, None, str(user.id), file_id)

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
                await query.message.edit_text(
                    f"üóë {user.first_name}, —É–¥–∞–ª—è—é —Ñ–∞–π–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞..."
                )
                await s3_client.delete_file(f"feeds/feed_{file_id}.xml")

                # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                if file_manager.delete_file(file_id):
                    await query.message.edit_text(
                        f"‚úÖ {user.first_name}, —Ñ–∞–π–ª –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_files")
                        ]])
                    )
                else:
                    await query.message.edit_text(
                        f"‚ö†Ô∏è {user.first_name}, –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_files")
                        ]])
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await query.message.edit_text(
                    f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∞–π–ª—É", callback_data=f"file_{file_id}")
                    ]])
                )

async def show_user_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ callback_query –∏–ª–∏ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.callback_query:
        message = update.callback_query.message
        user = update.callback_query.from_user
    else:
        message = update.message
        user = update.effective_user

    files = file_manager.get_user_files(str(user.id))
    
    if not files:
        text = (
            f"{user.first_name}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª."
        )
        if update.callback_query:
            await message.edit_text(
                text,
                reply_markup=get_main_menu_inline()
            )
        else:
            await message.reply_text(
                text,
                reply_markup=get_base_keyboard(user.id in ADMIN_IDS)
            )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
    files_by_type = {}
    for file in files:
        if file.object_type not in files_by_type:
            files_by_type[file.object_type] = []
        files_by_type[file.object_type].append(file)
    
    message_text = f"üìã {user.first_name}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤:\n\n"
    buttons = []
    
    for obj_type, type_files in files_by_type.items():
        message_text += f"\n{OBJECT_TYPES[obj_type]}:\n"
        for file in type_files:
            status_emoji = {
                "new": "üÜï",
                "processing": "‚è≥",
                "processed": "‚úÖ",
                "error": "‚ùå"
            }.get(file.status, "‚ùì")
            message_text += f"{status_emoji} {file.original_name}\n"
            buttons.append([InlineKeyboardButton(
                f"{status_emoji} {file.original_name}",
                callback_data=f"file_{file.file_id}"
            )])
    
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")])
    
    if update.callback_query:
        await message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await message.reply_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(buttons)
        )

def generate_file_id(file_content: bytes, user_id: str, object_type: str, filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∏–º–µ–Ω–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    combined = f"{filename}:{user_id}:{object_type}"
    return hashlib.sha256(combined.encode()).hexdigest()[:32]

async def process_excel_file(file_content: bytes, document: Document, user_id: str, object_type: str) -> tuple[str, str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id –∏ –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º file_id –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    file_id = generate_file_id(file_content, user_id, object_type, document.file_name)
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    file_path = os.path.join(SAVE_DIR, f"{file_id}_{document.file_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_path, 'wb') as f:
        f.write(file_content)
    
    return file_id, file_path

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª."""
    document: Document = update.message.document
    user = update.effective_user
    temp_file_path = None
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª {document.file_name}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        updating_file_id = context.user_data.get('updating_file_id')
        if updating_file_id:
            # –û—á–∏—â–∞–µ–º ID –æ–±–Ω–æ–≤–ª—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            del context.user_data['updating_file_id']
            await handle_file_update(update, context, updating_file_id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if 'selected_object_type' not in context.user_data:
            await update.message.reply_text(
                f"{user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:",
                reply_markup=get_object_type_keyboard()
            )
            return

        obj_type = context.user_data['selected_object_type']
        
        if document.mime_type not in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel']:
            return await update.message.reply_text(
                f"{user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)."
            )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        file = await context.bot.get_file(document.file_id)
        file_content = await file.download_as_bytearray()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID –∏ –ø—É—Ç—å
        file_id, temp_file_path = await process_excel_file(file_content, document, str(user.id), obj_type)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º ID
        existing_file = file_manager.get_file_metadata(file_id)
        if existing_file:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
            context.user_data['updating_file_id'] = file_id
            await update.message.reply_text(
                f"üìù {user.first_name}, —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {existing_file.original_name}\n"
                f"–ó–∞–≥—Ä—É–∂–µ–Ω: {existing_file.upload_date}\n\n"
                "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª?",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"update_{file_id}"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="back_main")
                    ]
                ])
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        metadata = file_manager.add_file(
            file_id=file_id,
            original_name=document.file_name,
            user_id=str(user.id),
            object_type=obj_type
        )
        
        await update.message.reply_text(
            f"üì• {user.first_name}, —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        file_manager.update_file_status(file_id, "processing")

        worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
        if not worksheet:
            file_manager.update_file_status(file_id, "error", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            await update.message.reply_text(
                f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        rows_added, messages = sheets_client.update_sheet_with_excel(
            worksheet,
            temp_file_path,
            str(user.id),
            file_id
        )

        if messages:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            file_manager.update_file_status(file_id, "error", "; ".join(messages))
            await update.message.reply_text(
                f"‚ùå {user.first_name}, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏:\n" + "\n".join(messages)
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML-—Ñ–∏–¥
        try:
            records = sheets_client.get_developer_data(worksheet, str(user.id), file_id)
            xml_content = xml_generator.generate_feed(records)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–¥ –≤ S3
            s3_filename = f"feed_{file_id}.xml"
            public_url = await s3_client.upload_file(xml_content, s3_filename)
            
            if not public_url:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–¥ –≤ S3")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            file_manager.update_file_status(file_id, "processed")
            
            await update.message.reply_text(
                f"‚úÖ {user.first_name}, —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
                f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {rows_added}\n"
                f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ XML-—Ñ–∏–¥: {public_url}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞: {e}")
            file_manager.update_file_status(file_id, "error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML-—Ñ–∏–¥–∞")
            await update.message.reply_text(
                f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ XML-—Ñ–∏–¥–∞"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.remove(temp_file_path)
                logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_file_path}: {e}")

async def handle_file_update(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞."""
    document: Document = update.message.document
    user = update.effective_user
    
    if document.mime_type not in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel']:
        return await update.message.reply_text(
            f"{user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)."
        )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
        file_metadata = file_manager.get_file_metadata(file_id)
        if not file_metadata:
            return await update.message.reply_text("‚ùå –§–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if str(user.id) != file_metadata.user_id and user.id not in ADMIN_IDS:
            return await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        file_path = os.path.join(SAVE_DIR, f"update_{file_id}_{document.file_name}")
        await file.download_to_drive(file_path)
        
        await update.message.reply_text(
            f"üì• {user.first_name}, —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        file_manager.update_file_status(file_id, "processing")

        worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
        if not worksheet:
            file_manager.update_file_status(file_id, "error", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
            return await update.message.reply_text(
                f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets"
            )

        await update.message.reply_text(
            f"üìä {user.first_name}, –ø—Ä–æ–≤–µ—Ä—è—é –∏ –æ–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ..."
        )

        # –ü–µ—Ä–µ–¥–∞–µ–º file_id –≤ –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        rows_added, errors = sheets_client.update_sheet_with_excel(
            worksheet,
            file_path,
            str(user.id),
            file_id
        )

        if errors:
            file_manager.update_file_status(file_id, "error", "\n".join(errors))
            return await update.message.reply_text(
                f"‚ùå {user.first_name}, –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏:\n" + "\n".join(errors)
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        file_metadata.original_name = document.file_name
        file_manager.update_file_status(file_id, "processed")

        await update.message.reply_text(
            f"‚úÖ {user.first_name}, –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
            f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {rows_added}"
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∏–¥
        await update.message.reply_text(
            f"üìà {user.first_name}, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π XML —Ñ–∏–¥..."
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        records = sheets_client.get_developer_data(worksheet, str(user.id), file_id)
        output_path = f"uploads/feed_{file_id}.xml"
        if not xml_generator.create_xml_feed(records, output_path, developer_id=str(user.id)):
            return await update.message.reply_text(
                f"‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∏–¥–∞"
            )

        url = await s3_client.upload_file(output_path, f"feeds/feed_{file_id}.xml")
        if url:
            await update.message.reply_text(
                f"‚úÖ {user.first_name}, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ: {len(records)}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå {user.first_name}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        file_manager.update_file_status(file_id, "error", str(e))
        await update.message.reply_text(
            f"‚ùå {user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        )
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)

async def getfeed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π —Ñ–∏–¥")
    await update.message.reply_text('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–¥...')

    try:
        worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
        if not worksheet:
            return await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets')

        records = sheets_client.get_developer_data(worksheet, str(user_id))
        if not records:
            return await update.message.reply_text('‚ÑπÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –≤–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤')

        output_path = f"uploads/feed_{user_id}.xml"
        success = xml_generator.create_xml_feed(
            data=records,
            output_path=output_path,
            developer_id=str(user_id)
        )

        if not success:
            return await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∏–¥–∞")

        url = await s3_client.upload_file(output_path, f"feeds/feed_{user_id}.xml")
        if url:
            await update.message.reply_text(f"‚úÖ –í–∞—à —Ñ–∏–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

    except Exception as e:
        logger.error(f"[ERROR] /getfeed: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def getallfeed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∏–¥ —Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏."""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Ñ–∏–¥ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        message = "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞."
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(message)
        else:
            await update.message.reply_text(message)
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â–∏–π —Ñ–∏–¥")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.answer()
        message = await update.callback_query.message.reply_text('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π —Ñ–∏–¥...')
    else:
        message = await update.message.reply_text('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π —Ñ–∏–¥...')

    try:
        worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
        if not worksheet:
            await message.edit_text('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets')
            return

        records = sheets_client.get_developer_data(worksheet)
        if not records:
            await message.edit_text('‚ÑπÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤')
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML-—Ñ–∏–¥
        xml_content = xml_generator.generate_feed(records)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–¥ –≤ S3
        s3_filename = "feed_all.xml"
        public_url = await s3_client.upload_file(xml_content, s3_filename)
        
        if public_url:
            await message.edit_text(
                f"‚úÖ –û–±—â–∏–π —Ñ–∏–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(records)}\n"
                f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–¥: {public_url}"
            )
        else:
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞: {e}")
        await message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "üîç *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –æ—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "*–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:*\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'\n"
        "3. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª\n\n"
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏:*\n"
        "‚Ä¢ 'üìã –ú–æ–∏ —Ñ–∞–π–ª—ã' - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏\n"
        "‚Ä¢ 'üìã –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥' - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è XML-—Ñ–∏–¥–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Ü©Ô∏è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é."
    )
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        ) 

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    user = update.effective_user
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_inline()
        )
    
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    
    elif text == "üìö –®–∞–±–ª–æ–Ω—ã/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
        await handle_templates(update, context)
    
    elif text == "ü§ü –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user.id in ADMIN_IDS:
        await update.message.reply_text(
            f"{user.first_name}, –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_menu_inline()
        ) 

async def menu_action_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    action = query.data.split('_', 1)[1]
    user = update.effective_user

    if action == "upload":
        await query.message.edit_text(
            f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:",
            reply_markup=get_object_type_keyboard()
        )
    
    elif action == "files":
        await show_user_files(update, context)
    
    elif action == "feed":
        await query.message.edit_text(
            f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞:",
            reply_markup=get_user_feed_keyboard(str(user.id))
        )
    
    elif action == "back_main":
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        context.user_data.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.edit_text(
            f"{user.first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_inline()
        ) 

async def handle_template_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏."""
    query = update.callback_query
    await query.answer()
    
    action = query.data.split('_')[1]
    
    if action == "excel":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω Excel
        template_path = "templates/partner_template.xlsx"
        await query.message.reply_document(
            document=open(template_path, 'rb'),
            filename="template.xlsx",
            caption=(
                "üìä –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n"
                "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è\n"
                "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"
            )
        )
    
    elif action == "docs":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await query.message.edit_text(
            "üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:",
            reply_markup=get_docs_keyboard()
        )
    
    elif action == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–æ–≤
        await query.message.edit_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:\n\n"
            "‚Ä¢ Excel —à–∞–±–ª–æ–Ω - –≥–æ—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –ø—Ä–∞–≤–∏–ª",
            reply_markup=get_templates_keyboard()
        )

async def handle_docs_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π."""
    query = update.callback_query
    await query.answer()
    
    action = query.data.split('_')[1]
    
    if action == "md":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º markdown —Ñ–∞–π–ª
        docs_path = "templates/partner_template_description.md"
        await query.message.reply_document(
            document=open(docs_path, 'rb'),
            filename="instructions.md",
            caption="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"
        )
    
    elif action == "pdf":
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é MD –≤ PDF
        await query.message.reply_text(
            "üîÑ –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ PDF –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –≤–µ—Ä—Å–∏—é –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —á–∞—Ç–µ."
        )
    
    elif action == "read":
        # –ß–∏—Ç–∞–µ–º MD —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open("templates/partner_template_description.md", 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª # –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
        sections = content[1:].split('\n## ')
        main_section = sections[0]  # –û—Å–Ω–æ–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –≤–≤–µ–¥–µ–Ω–∏–µ–º
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        section_buttons = []
        for i, section in enumerate(sections[1:], 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1, —Ç–∞–∫ –∫–∞–∫ 0 - —ç—Ç–æ –≤–≤–µ–¥–µ–Ω–∏–µ
            title = section.split('\n')[0]
            section_buttons.append([InlineKeyboardButton(title, callback_data=f"section_{i}")])
        
        section_buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="template_back")])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
        intro_text = (
            "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö\n\n" +
            main_section.split('\n', 1)[1] + "\n\n" +  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–≤–µ–¥–µ–Ω–∏—è
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
        )
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(intro_text) > 4096:
            intro_text = intro_text[:4000] + "\n\n(–≤–≤–µ–¥–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é)"
        
        await query.message.edit_text(
            intro_text,
            reply_markup=InlineKeyboardMarkup(section_buttons),
            parse_mode='Markdown'
        )

async def handle_section_view(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    section_idx = int(query.data.split('_')[1])
    
    try:
        # –ß–∏—Ç–∞–µ–º MD —Ñ–∞–π–ª
        with open("templates/partner_template_description.md", 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª # –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
        sections = content[1:].split('\n## ')
        
        if 0 <= section_idx < len(sections):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏
            section_content = f"## {sections[section_idx]}"
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
            if len(section_content) > 4096:
                section_content = section_content[:4000] + "\n\n(—Ä–∞–∑–¥–µ–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–∫–∞—á–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é)"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            nav_buttons = []
            if section_idx > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"section_{section_idx-1}"))
            if section_idx < len(sections) - 1:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"section_{section_idx+1}"))
            
            buttons = [nav_buttons] if nav_buttons else []
            buttons.append([InlineKeyboardButton("üìñ –ö —Å–ø–∏—Å–∫—É —Ä–∞–∑–¥–µ–ª–æ–≤", callback_data="docs_read")])
            buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="template_back")])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏
            await query.message.edit_text(
                section_content,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode='Markdown'
            )
        else:
            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ø–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞–∑–¥–µ–ª–æ–≤
            await query.message.edit_text(
                "‚ö†Ô∏è –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=get_docs_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞–∑–¥–µ–ª–∞: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª.",
            reply_markup=get_docs_keyboard()
        )

def get_templates_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
    buttons = [
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel", callback_data="template_excel")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é", callback_data="template_docs")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def get_docs_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    buttons = [
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤ PDF", callback_data="docs_pdf")],
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –≤ Markdown", callback_data="docs_md")],
        [InlineKeyboardButton("üìñ –ß–∏—Ç–∞—Ç—å –≤ —á–∞—Ç–µ", callback_data="docs_read")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="template_back")]
    ]
    return InlineKeyboardMarkup(buttons)

async def handle_templates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –®–∞–±–ª–æ–Ω—ã/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    await update.message.reply_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç:\n\n"
        "‚Ä¢ Excel —à–∞–±–ª–æ–Ω - –≥–æ—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –ø—Ä–∞–≤–∏–ª",
        reply_markup=get_templates_keyboard()
    ) 