import os
import logging
from telegram import Update, Document, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from google_sheets.sheets import GoogleSheetsClient
from feed.feed_generator import XMLFeedGenerator
from s3_async_client import S3AsyncClient
from dotenv import load_dotenv
from datetime import datetime
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)
logging.getLogger('aiohttp').setLevel(logging.WARNING)
logging.getLogger('aiobotocore').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SAVE_DIR = "uploads"
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(',')))

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(SAVE_DIR):
    os.makedirs(SAVE_DIR)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
sheets_client = GoogleSheetsClient(os.getenv('GOOGLE_CREDENTIALS_PATH', 'google-credentials.json'))
xml_generator = XMLFeedGenerator()
s3_client = S3AsyncClient(
    access_key=os.getenv('S3_ACCESS_KEY'),
    secret_key=os.getenv('S3_SECRET_KEY'),
    endpoint_url_base=os.getenv('S3_ENDPOINT', '').replace('https://', '').replace('http://', ''),
    bucket_name=os.getenv('S3_BUCKET'),
    public_endpoint=os.getenv('S3_PUBLIC_ENDPOINT')
)

def get_main_menu(is_admin: bool = False):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    buttons = [
        ["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª"],
        ["üìã –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥"]
    ]
    if is_admin:
        buttons.append(["üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_admin_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    buttons = [
        ["üìä –û–±—â–∏–π —Ñ–∏–¥", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    is_admin = user_id in ADMIN_IDS
    await update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å XML-—Ñ–∏–¥ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu(is_admin)
    )

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    text = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {text}")

    if text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –æ–±—ä–µ–∫—Ç–æ–≤.\n"
            "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è."
        )
    
    elif text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel-—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
            "–Ø –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –Ω–æ –Ω–µ –±—É–¥—É –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
        )
    
    elif text == "üìã –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥":
        await getfeed(update, context)
    
    elif text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user_id in ADMIN_IDS:
        await update.message.reply_text(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_menu()
        )
    
    elif text == "üìä –û–±—â–∏–π —Ñ–∏–¥" and user_id in ADMIN_IDS:
        await getallfeed(update, context)
    
    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user_id in ADMIN_IDS:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    elif text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user_id in ADMIN_IDS)
        )

async def validate_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    document: Document = update.message.document
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–π–ª–∞ {document.file_name}")

    if document.mime_type not in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel']:
        return await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).')

    try:
        file = await context.bot.get_file(document.file_id)
        file_path = os.path.join(SAVE_DIR, f"validate_{document.file_name}")
        await file.download_to_drive(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        df = pd.read_excel(file_path)
        is_valid, messages = sheets_client.validator.validate_dataframe(df)
        
        if is_valid:
            response = "‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n"
            response += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(df)}\n"
            response += "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'"
        else:
            response = "‚ùå –í —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\n"
            response += "\n".join(f"- {msg}" for msg in messages)
            
        await update.message.reply_text(response)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª."""
    document: Document = update.message.document
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª {document.file_name}")

    if document.mime_type not in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel']:
        return await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).')

    try:
        file = await context.bot.get_file(document.file_id)
        file_path = os.path.join(SAVE_DIR, document.file_name)
        await file.download_to_drive(file_path)
        await update.message.reply_text('üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...')

        worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
        if not worksheet:
            return await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets')

        rows_added, errors = sheets_client.update_sheet_with_excel(
            worksheet,
            file_path,
            str(user_id)
        )

        if errors:
            return await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:\n" + "\n".join(errors))

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–∞
        records = sheets_client.get_developer_data(worksheet, str(user_id))
        
        output_path = f"uploads/feed_{user_id}.xml"
        if not xml_generator.create_xml_feed(records, output_path, developer_id=str(user_id)):
            return await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∏–¥–∞")

        url = await s3_client.upload_file(output_path, f"feeds/feed_{user_id}.xml")
        if url:
            await update.message.reply_text(
                f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {rows_added}\n"
                f"üîó –§–∏–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

async def getfeed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π —Ñ–∏–¥")
    await update.message.reply_text('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–¥...')

    try:
        worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
        if not worksheet:
            return await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets')

        records = sheets_client.get_developer_data(worksheet, str(user_id))
        if not records:
            return await update.message.reply_text('‚ÑπÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –≤–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤')

        output_path = f"uploads/feed_{user_id}.xml"
        success = xml_generator.create_xml_feed(
            data=records,
            output_path=output_path,
            developer_id=str(user_id)
        )

        if not success:
            return await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∏–¥–∞")

        url = await s3_client.upload_file(output_path, f"feeds/feed_{user_id}.xml")
        if url:
            await update.message.reply_text(f"‚úÖ –í–∞—à —Ñ–∏–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

    except Exception as e:
        logger.error(f"[ERROR] /getfeed: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def getallfeed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π —Ñ–∏–¥ —Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏."""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π —Ñ–∏–¥ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return await update.message.reply_text('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∏–¥–∞.')

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â–∏–π —Ñ–∏–¥")
    await update.message.reply_text('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π —Ñ–∏–¥...')

    try:
        worksheet = sheets_client.get_sheet_client(os.getenv('GOOGLE_SHEET_NAME', '–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'))
        if not worksheet:
            return await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets')

        records = sheets_client.get_developer_data(worksheet)
        if not records:
            return await update.message.reply_text('‚ÑπÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

        output_path = "uploads/feed_all.xml"
        success = xml_generator.create_xml_feed(
            data=records,
            output_path=output_path
        )

        if not success:
            return await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML —Ñ–∏–¥–∞")

        url = await s3_client.upload_file(output_path, "feeds/feed_all.xml")
        if url:
            await update.message.reply_text(f"‚úÖ –û–±—â–∏–π —Ñ–∏–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\n{url}")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")

    except Exception as e:
        logger.error(f"[ERROR] /getallfeed: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
    
    help_text = (
        "ü§ñ –Ø –ø–æ–º–æ–≥–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å XML-—Ñ–∏–¥—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª - –∑–∞–≥—Ä—É–∑–∫–∞ Excel-—Ñ–∞–π–ª–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
        "üìã –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–¥ - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à XML-—Ñ–∏–¥\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:\n"
        "- –§–æ—Ä–º–∞—Ç: Excel (.xlsx –∏–ª–∏ .xls)\n"
        "- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: internal_id, address, price, area_total\n"
        "- –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π internal_id\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await update.message.reply_text(help_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        ) 